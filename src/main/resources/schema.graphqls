type Query {
    bookById(id: ID!): Book
    bookByAuthor(author_id: ID!): Book
    bookBy(id: ID, author_i: ID): Book

    viewer: Session

    dummy(d: DateTime): JSON


    search_tickets(context: JSON, filter: NFilter, limit: Int, offset: Int, sort: [NSort]): TicketSearchResult @auth(scope: "mss")
    aggregate_tickets(context: JSON, filter: NFilter, limit: Int, offset: Int, sort: [NSort]): TicketSearchResult
}

directive @auth(scope: String!) on FIELD_DEFINITION

type Mutation {
    createAuthor(name: String!): Author

    createBook(name: String!, pageCount: Int!, author_id: ID!): Book
}

scalar DateTime
scalar Email
scalar Object
scalar JSON


type Session {
    id: ID!
    user: User!
    ts: DateTime
}

type User {
    id: ID!
    name: String!
    email: Email!
}

type TicketSearchResult {
    meta: MetaResult
    items: [TicketResult]
}

type MetaResult {
    took: Int
    hits: Int
}

type TicketResult {
    ticketId: ID!
    category: String
    priority: Int
    description: String
    events: [Event!]!
}

type Event {
    id: ID!
}

input NField {
    name: String
    source: String!
}

input NFilter {
    condition: NFilterCondition
    and: [NFilter]
    or: [NFilter]
    not: [NFilter]
}

input NFilterCondition {
    contains: NFilterValue
    eq: NFilterValue
    in: NFilterValue
    isblank: NFilterValue
    isnull: NFilterValue
    range: NFilterValue
    regexp: NFilterValue
}

input NFilterValue {
    value: String!
}

input NSort {
    attribute: String!
}






type Book {
    id: ID!
    name: String
    pageCount: Int
    author: Author
}

type Author {
    id: ID!
    firstName: String
    lastName: String
}

